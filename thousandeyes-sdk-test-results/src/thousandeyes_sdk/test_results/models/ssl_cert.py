# coding: utf-8

"""
    Test Results API

    Get test result metrics for Cloud and Enterprise Agent tests.

    The version of the OpenAPI document: 7.0.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SslCert(BaseModel):
    """
    SslCert
    """ # noqa: E501
    days_until_expiry: Optional[StrictInt] = Field(default=None, description="Days until certificate expires, rounded down. 0 is shown if there are less than 24 hours remaining. Calculated when the test was executed.", alias="daysUntilExpiry")
    is_fetch_date_in_valid_cert_date_range: Optional[StrictBool] = Field(default=None, description="True when certificate fetch date is within the valid certificate date range, false otherwise", alias="isFetchDateInValidCertDateRange")
    has_valid_signing_cert: Optional[StrictBool] = Field(default=None, description="This field is implicitly true; it is output only when false. false indicates this certificate was missing a valid signing certificate in the chain.", alias="hasValidSigningCert")
    issuer_name: Optional[StrictStr] = Field(default=None, description="Certificate issuer", alias="issuerName")
    valid_before: Optional[datetime] = Field(default=None, description="Certificate is not valid after this date", alias="validBefore")
    valid_after: Optional[datetime] = Field(default=None, description="Certificate is not valid before this date", alias="validAfter")
    subject_alternative_names: Optional[List[StrictStr]] = Field(default=None, description="Alternative name(s) of the certificate subject, extracted from the Subject Alternative Name (SAN) X.509 certificate extension, for example example.com, www2.example.com", alias="subjectAlternativeNames")
    subject_name: Optional[StrictStr] = Field(default=None, description="certificate’s subject name - a value of the common name (CN) RDN from the certificate’s Subject attribute, for example www.example.com", alias="subjectName")
    __properties: ClassVar[List[str]] = ["daysUntilExpiry", "isFetchDateInValidCertDateRange", "hasValidSigningCert", "issuerName", "validBefore", "validAfter", "subjectAlternativeNames", "subjectName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SslCert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SslCert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "daysUntilExpiry": obj.get("daysUntilExpiry"),
            "isFetchDateInValidCertDateRange": obj.get("isFetchDateInValidCertDateRange"),
            "hasValidSigningCert": obj.get("hasValidSigningCert"),
            "issuerName": obj.get("issuerName"),
            "validBefore": obj.get("validBefore"),
            "validAfter": obj.get("validAfter"),
            "subjectAlternativeNames": obj.get("subjectAlternativeNames"),
            "subjectName": obj.get("subjectName")
        })
        return _obj


