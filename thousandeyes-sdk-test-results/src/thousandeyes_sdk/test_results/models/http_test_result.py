# coding: utf-8

"""
    Test Results API

    Get test result metrics for Cloud and Enterprise Agent tests.

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from thousandeyes_sdk.test_results.models.agent import Agent
from thousandeyes_sdk.test_results.models.http_test_result_headers import HttpTestResultHeaders
from thousandeyes_sdk.test_results.models.ssl_cert import SslCert
from thousandeyes_sdk.test_results.models.test_result_app_links import TestResultAppLinks
from typing import Optional, Set
from typing_extensions import Self

class HttpTestResult(BaseModel):
    """
    HttpTestResult
    """ # noqa: E501
    var_date: Optional[datetime] = Field(default=None, description="Data point date UTC (ISO date-time format).", alias="date")
    round_id: Optional[StrictInt] = Field(default=None, description="Epoch time (seconds) indicating the start time of the round", alias="roundId")
    links: Optional[TestResultAppLinks] = Field(default=None, alias="_links")
    start_time: Optional[StrictInt] = Field(default=None, description="Epoch time (seconds) indicating the start time of the round", alias="startTime")
    end_time: Optional[StrictInt] = Field(default=None, description="Epoch time (seconds) indicating the end time of the round", alias="endTime")
    agent: Optional[Agent] = None
    server_ip: Optional[StrictStr] = Field(default=None, description="IP address of destination server", alias="serverIp")
    response_code: Optional[StrictInt] = Field(default=None, description="HTTP response code", alias="responseCode")
    num_redirects: Optional[StrictInt] = Field(default=None, description="Number of redirects", alias="numRedirects")
    redirect_time: Optional[StrictInt] = Field(default=None, description="Cumulative redirect timing in milliseconds", alias="redirectTime")
    dns_time: Optional[StrictInt] = Field(default=None, description="Time required to resolve DNS in milliseconds", alias="dnsTime")
    ssl_time: Optional[StrictInt] = Field(default=None, description="Time to negotiate SSL/TLS in milliseconds", alias="sslTime")
    connect_time: Optional[StrictInt] = Field(default=None, description="Time required to establish a TCP connection to the server", alias="connectTime")
    wait_time: Optional[StrictInt] = Field(default=None, description="Time elapsed between completion of request and first byte of response in milliseconds", alias="waitTime")
    receive_time: Optional[StrictInt] = Field(default=None, description="Elapsed time between first and last byte of response in milliseconds", alias="receiveTime")
    wire_size: Optional[StrictInt] = Field(default=None, description="Size of content in bytes", alias="wireSize")
    response_time: Optional[StrictInt] = Field(default=None, description="Time to first byte in milliseconds", alias="responseTime")
    throughput: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="WireSize divided by receiveTime in byter per second")
    total_time: Optional[StrictInt] = Field(default=None, description="response time + receive time", alias="totalTime")
    headers: Optional[HttpTestResultHeaders] = None
    error_type: Optional[StrictStr] = Field(default=None, description="Type of error encountered; corresponds to phase of connection", alias="errorType")
    error_details: Optional[StrictStr] = Field(default=None, description="Error details, if an error were encountered", alias="errorDetails")
    ssl_cipher: Optional[StrictStr] = Field(default=None, description="Cipher suite", alias="sslCipher")
    ssl_version: Optional[StrictStr] = Field(default=None, description="TLS version", alias="sslVersion")
    ssl_certificates: Optional[List[SslCert]] = Field(default=None, alias="sslCertificates")
    health_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A normalized value (0.0-1.0) representing the web application connection health of the test target. Returns negative values as error codes. -1.0 indicates there was insufficient data to calculate the health score.", alias="healthScore")
    __properties: ClassVar[List[str]] = ["date", "roundId", "_links", "startTime", "endTime", "agent", "serverIp", "responseCode", "numRedirects", "redirectTime", "dnsTime", "sslTime", "connectTime", "waitTime", "receiveTime", "wireSize", "responseTime", "throughput", "totalTime", "headers", "errorType", "errorDetails", "sslCipher", "sslVersion", "sslCertificates", "healthScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpTestResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_date",
            "round_id",
            "start_time",
            "end_time",
            "server_ip",
            "error_type",
            "error_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agent
        if self.agent:
            _dict['agent'] = self.agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ssl_certificates (list)
        _items = []
        if self.ssl_certificates:
            for _item in self.ssl_certificates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sslCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpTestResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "roundId": obj.get("roundId"),
            "_links": TestResultAppLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "agent": Agent.from_dict(obj["agent"]) if obj.get("agent") is not None else None,
            "serverIp": obj.get("serverIp"),
            "responseCode": obj.get("responseCode"),
            "numRedirects": obj.get("numRedirects"),
            "redirectTime": obj.get("redirectTime"),
            "dnsTime": obj.get("dnsTime"),
            "sslTime": obj.get("sslTime"),
            "connectTime": obj.get("connectTime"),
            "waitTime": obj.get("waitTime"),
            "receiveTime": obj.get("receiveTime"),
            "wireSize": obj.get("wireSize"),
            "responseTime": obj.get("responseTime"),
            "throughput": obj.get("throughput"),
            "totalTime": obj.get("totalTime"),
            "headers": HttpTestResultHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "errorType": obj.get("errorType"),
            "errorDetails": obj.get("errorDetails"),
            "sslCipher": obj.get("sslCipher"),
            "sslVersion": obj.get("sslVersion"),
            "sslCertificates": [SslCert.from_dict(_item) for _item in obj["sslCertificates"]] if obj.get("sslCertificates") is not None else None,
            "healthScore": obj.get("healthScore")
        })
        return _obj


