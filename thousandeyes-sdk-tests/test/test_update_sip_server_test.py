# coding: utf-8

"""
    Tests API

    This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

    The version of the OpenAPI document: 7.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from thousandeyes_sdk.tests.models.update_sip_server_test import UpdateSipServerTest

class TestUpdateSipServerTest(unittest.TestCase):
    """UpdateSipServerTest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateSipServerTest:
        """Test UpdateSipServerTest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateSipServerTest`
        """
        model = UpdateSipServerTest()
        if include_optional:
            return UpdateSipServerTest(
                interval = 120,
                alerts_enabled = True,
                enabled = True,
                alert_rules = ["344753","212697"],
                created_by = 'user@user.com',
                created_date = '2022-07-17T22:00:54Z',
                description = 'ThousandEyes Test',
                live_share = False,
                modified_by = 'user@user.com',
                modified_date = '2022-07-17T22:00:54Z',
                saved_event = True,
                test_id = '281474976710706',
                test_name = 'ThousandEyes Test',
                type = 'sip-server',
                links = thousandeyes_sdk.tests.models.test_links.TestLinks(
                    self = null, 
                    test_results = [{"href":"https://api.thousandeyes.com/v7/test-results/281474976710706/network"},{"href":"https://api.thousandeyes.com/v7/test-results/281474976710706/path-vis"}], ),
                labels = ["9842","1283"],
                shared_with_accounts = ["1234","12345"],
                mtu_measurements = False,
                network_measurements = True,
                num_path_traces = 1,
                options_regex = '["a-z"]',
                path_trace_mode = 'classic',
                probe_mode = 'auto',
                register_enabled = True,
                sip_target_time = 100,
                sip_time_limit = 5,
                fixed_packet_rate = 50,
                ipv6_policy = 'use-agent-policy',
                agents = [
                    {"agentId":"125","sourceIpAddress":"1.1.1.1"}
                    ],
                target_sip_credentials = thousandeyes_sdk.tests.models.test_sip_credentials.TestSipCredentials(
                    auth_user = 'username', 
                    password = 'password', 
                    port = 1, 
                    protocol = 'tcp', 
                    sip_registrar = 'voice.thousandeyes.com', 
                    user = 'username', ),
                bgp_measurements = True,
                use_public_bgp = True,
                monitors = [
                    thousandeyes_sdk.tests.models.monitor.Monitor(
                        country_id = 'GB', 
                        monitor_id = '1234', 
                        ip_address = '4.69.184.193', 
                        network = 'Level 3 Communications, Inc. (AS 3356)', 
                        monitor_type = 'public', 
                        monitor_name = 'Seattle, WA', )
                    ]
            )
        else:
            return UpdateSipServerTest(
                interval = 120,
                target_sip_credentials = thousandeyes_sdk.tests.models.test_sip_credentials.TestSipCredentials(
                    auth_user = 'username', 
                    password = 'password', 
                    port = 1, 
                    protocol = 'tcp', 
                    sip_registrar = 'voice.thousandeyes.com', 
                    user = 'username', ),
        )
        """

    def testUpdateSipServerTest(self):
        """Test UpdateSipServerTest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
