# coding: utf-8

"""
    Alerts API

    You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

    The version of the OpenAPI document: 7.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from thousandeyes_sdk.alerts.models.base_alert_suppression_window import BaseAlertSuppressionWindow

class TestBaseAlertSuppressionWindow(unittest.TestCase):
    """BaseAlertSuppressionWindow unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BaseAlertSuppressionWindow:
        """Test BaseAlertSuppressionWindow
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BaseAlertSuppressionWindow`
        """
        model = BaseAlertSuppressionWindow()
        if include_optional:
            return BaseAlertSuppressionWindow(
                alert_suppression_window_id = '2411',
                name = 'Monthly maintenance',
                is_enabled = False,
                status = 'ended',
                start_date = '2017-07-01T05:00Z',
                duration = 0,
                repeat = thousandeyes_sdk.alerts.models.repeat.Repeat(
                    type = 'week', 
                    interval_type = 'day', 
                    interval_length = 2, 
                    days_of_week = [
                        'sun'
                        ], ),
                end_repeat = thousandeyes_sdk.alerts.models.end_repeat.EndRepeat(
                    type = 'never', 
                    count = 3, 
                    date = 'Sat Jul 01 01:00:00 BST 2017', )
            )
        else:
            return BaseAlertSuppressionWindow(
        )
        """

    def testBaseAlertSuppressionWindow(self):
        """Test BaseAlertSuppressionWindow"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
