# coding: utf-8

"""
    Agents API

     ## Overview Manage all agents available to your account in ThousandEyes, including both Cloud and Enterprise Agents.

    The version of the OpenAPI document: 7.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from thousandeyes_sdk.agents.models.cluster_member import ClusterMember

class TestClusterMember(unittest.TestCase):
    """ClusterMember unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterMember:
        """Test ClusterMember
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterMember`
        """
        model = ClusterMember()
        if include_optional:
            return ClusterMember(
                ip_addresses = ["99.139.65.220","9bbd:8a0a:a257:5876:288b:6cb2:3f36:64ce"],
                public_ip_addresses = ["192.168.1.78","f9b2:3a21:f25c:d300:03f4:586d:f8d6:4e1c"],
                network = 'AT&T Services, Inc. (AS 7018)',
                member_id = '10',
                name = 'Cluster member name',
                error_details = [
                    thousandeyes_sdk.agents.models.error_detail.ErrorDetail(
                        code = 'agent-version-outdated', 
                        description = 'Agent Version 0.1.1 (latest: 1.0.0)', )
                    ],
                last_seen = '2022-07-17T22:00:54Z',
                agent_state = 'online',
                target_for_tests = '1.1.1.1',
                utilization = 25
            )
        else:
            return ClusterMember(
        )
        """

    def testClusterMember(self):
        """Test ClusterMember"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
