# coding: utf-8

"""
    Endpoint Test Results API

    Retrieve results for scheduled and dynamic tests on endpoint agents.

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PhysicalMemoryUsedBytes(BaseModel):
    """
    PhysicalMemoryUsedBytes
    """ # noqa: E501
    min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum sampled memory usage value recorded during the monitored period.")
    max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum sampled memory usage value recorded during the monitored period.")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mean (average) value of memory usage sampled over the monitored period.")
    median: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The median value of memory usage sampled over the monitored period.")
    std_dev: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The standard deviation of memory usage sampled during the monitored period.", alias="stdDev")
    count: Optional[StrictInt] = Field(default=None, description="The total number of samples collected during the monitored period.")
    __properties: ClassVar[List[str]] = ["min", "max", "mean", "median", "stdDev", "count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhysicalMemoryUsedBytes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "min",
            "max",
            "mean",
            "median",
            "std_dev",
            "count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhysicalMemoryUsedBytes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "min": obj.get("min"),
            "max": obj.get("max"),
            "mean": obj.get("mean"),
            "median": obj.get("median"),
            "stdDev": obj.get("stdDev"),
            "count": obj.get("count")
        })
        return _obj


