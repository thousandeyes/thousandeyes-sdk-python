# coding: utf-8

"""
    Tags API

    The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

    The version of the OpenAPI document: 7.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from thousandeyes_sdk.tags.models.tag_bulk_create_error import TagBulkCreateError

class TestTagBulkCreateError(unittest.TestCase):
    """TagBulkCreateError unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TagBulkCreateError:
        """Test TagBulkCreateError
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TagBulkCreateError`
        """
        model = TagBulkCreateError()
        if include_optional:
            return TagBulkCreateError(
                tag = {
                    'key' : thousandeyes_sdk.tags.models.tag_info.TagInfo(
                        assignments = [
                            thousandeyes_sdk.tags.models.assignment.Assignment(
                                id = '123', 
                                type = 'test', )
                            ], 
                        access_type = 'all', 
                        aid = 1234, 
                        color = '#FF0000', 
                        create_date = '2022-03-01T23:31:11Z', 
                        icon = '', 
                        id = '5aeab5d5-0d34-4d44-a7ac-fb440185295c', 
                        key = 'branch', 
                        legacy_id = '', 
                        object_type = 'test', 
                        value = 'sfo', )
                    },
                response_code = 200,
                message = 'Object successfully created'
            )
        else:
            return TagBulkCreateError(
        )
        """

    def testTagBulkCreateError(self):
        """Test TagBulkCreateError"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
